# Generated by Django 4.2.7 on 2025-10-15 21:17

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Supplier",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "supplier_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("phone", models.CharField(blank=True, max_length=50, null=True)),
                ("address", models.TextField(blank=True, null=True)),
                (
                    "registration_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("inactive", "Inactive"),
                        ],
                        default="active",
                        max_length=50,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "suppliers",
                "ordering": ["-created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "product_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                ("category", models.CharField(max_length=100)),
                (
                    "sku",
                    models.CharField(
                        blank=True, max_length=100, null=True, unique=True
                    ),
                ),
                (
                    "submission_status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("submitted", "Submitted"),
                            ("in_review", "In Review"),
                            ("testing", "Testing"),
                            ("completed", "Completed"),
                            ("rejected", "Rejected"),
                        ],
                        default="draft",
                        max_length=50,
                    ),
                ),
                ("submission_date", models.DateTimeField(blank=True, null=True)),
                ("review_date", models.DateTimeField(blank=True, null=True)),
                ("completion_date", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("version", models.IntegerField(default=1)),
                (
                    "supplier",
                    models.ForeignKey(
                        db_column="supplier_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "products",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Test",
            fields=[
                (
                    "test_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("Safety", "Safety"),
                            ("Compliance", "Compliance"),
                            ("Quality", "Quality"),
                            ("Performance", "Performance"),
                            ("Environmental", "Environmental"),
                        ],
                        max_length=100,
                    ),
                ),
                ("test_name", models.CharField(max_length=255)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "assigned_to",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("scheduled_date", models.DateTimeField(blank=True, null=True)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("result_summary", models.TextField(blank=True, null=True)),
                (
                    "result_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("pass", "Pass"),
                            ("fail", "Fail"),
                            ("conditional", "Conditional"),
                            ("pending", "Pending"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "result_file_url",
                    models.URLField(blank=True, max_length=1024, null=True),
                ),
                ("result_data", models.JSONField(blank=True, default=dict)),
                ("notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        db_column="product_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tests",
                        to="core.product",
                    ),
                ),
            ],
            options={
                "db_table": "tests",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TestHistory",
            fields=[
                (
                    "history_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("changed_by", models.CharField(max_length=255)),
                ("change_type", models.CharField(max_length=50)),
                ("old_status", models.CharField(blank=True, max_length=50, null=True)),
                ("new_status", models.CharField(blank=True, max_length=50, null=True)),
                ("change_description", models.TextField(blank=True, null=True)),
                ("changed_at", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "test",
                    models.ForeignKey(
                        db_column="test_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="core.test",
                    ),
                ),
            ],
            options={
                "db_table": "test_history",
                "ordering": ["-changed_at"],
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "report_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("composite", "Composite"),
                            ("interim", "Interim"),
                            ("final", "Final"),
                            ("summary", "Summary"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "report_format",
                    models.CharField(
                        choices=[("PDF", "PDF"), ("JSON", "JSON"), ("XML", "XML")],
                        default="PDF",
                        max_length=20,
                    ),
                ),
                ("report_url", models.URLField(blank=True, max_length=1024, null=True)),
                ("s3_bucket", models.CharField(blank=True, max_length=255, null=True)),
                ("s3_key", models.CharField(blank=True, max_length=1024, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("generating", "Generating"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("generated_at", models.DateTimeField(blank=True, null=True)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                ("file_size", models.BigIntegerField(blank=True, null=True)),
                ("checksum", models.CharField(blank=True, max_length=256, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        db_column="product_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reports",
                        to="core.product",
                    ),
                ),
            ],
            options={
                "db_table": "reports",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProductFile",
            fields=[
                (
                    "file_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        upload_to="product_files/%Y/%m/%d/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                ["pdf", "csv", "xml", "xlsx", "json"]
                            )
                        ],
                    ),
                ),
                ("file_name", models.CharField(max_length=255)),
                (
                    "file_type",
                    models.CharField(
                        choices=[
                            ("PDF", "PDF"),
                            ("CSV", "CSV"),
                            ("XML", "XML"),
                            ("XLSX", "Excel"),
                            ("JSON", "JSON"),
                        ],
                        max_length=50,
                    ),
                ),
                ("file_size", models.BigIntegerField()),
                ("s3_bucket", models.CharField(blank=True, max_length=255, null=True)),
                ("s3_key", models.CharField(blank=True, max_length=1024, null=True)),
                ("file_hash", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "upload_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("uploaded", "Uploaded"),
                            ("validated", "Validated"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("uploaded_at", models.DateTimeField(auto_now_add=True)),
                ("validated_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "product",
                    models.ForeignKey(
                        db_column="product_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="core.product",
                    ),
                ),
            ],
            options={
                "db_table": "product_files",
                "ordering": ["-uploaded_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "notification_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("recipient_id", models.UUIDField()),
                (
                    "recipient_type",
                    models.CharField(
                        choices=[
                            ("supplier", "Supplier"),
                            ("tester", "Tester"),
                            ("admin", "Admin"),
                        ],
                        max_length=50,
                    ),
                ),
                ("notification_type", models.CharField(max_length=50)),
                ("subject", models.CharField(max_length=255)),
                ("message", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("read", "Read"),
                        ],
                        default="pending",
                        max_length=50,
                    ),
                ),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
            ],
            options={
                "db_table": "notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["recipient_id", "recipient_type"],
                        name="notificatio_recipie_496e36_idx",
                    ),
                    models.Index(
                        fields=["status"], name="notificatio_status_fce6f5_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                (
                    "log_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("user_id", models.CharField(max_length=255)),
                ("user_type", models.CharField(max_length=50)),
                ("action", models.CharField(max_length=100)),
                ("entity_type", models.CharField(max_length=50)),
                ("entity_id", models.UUIDField(blank=True, null=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("request_data", models.JSONField(blank=True, default=dict)),
                ("response_status", models.IntegerField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "audit_logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user_id"], name="audit_logs_user_id_73c422_idx"
                    ),
                    models.Index(
                        fields=["entity_type", "entity_id"],
                        name="audit_logs_entity__d4c2e5_idx",
                    ),
                    models.Index(
                        fields=["created_at"], name="audit_logs_created_262184_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="test",
            index=models.Index(
                fields=["product", "status"], name="tests_product_1b497a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="test",
            index=models.Index(fields=["test_type"], name="tests_test_ty_f7750f_idx"),
        ),
        migrations.AddIndex(
            model_name="test",
            index=models.Index(fields=["assigned_to"], name="tests_assigne_d0dd31_idx"),
        ),
        migrations.AddIndex(
            model_name="test",
            index=models.Index(
                fields=["scheduled_date"], name="tests_schedul_693ebb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["product", "report_type"], name="reports_product_f43c6b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(fields=["status"], name="reports_status_e83c1d_idx"),
        ),
        migrations.AddIndex(
            model_name="report",
            index=models.Index(
                fields=["generated_at"], name="reports_generat_a38578_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["supplier", "submission_status"],
                name="products_supplie_10aed7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(fields=["category"], name="products_categor_fce6e6_idx"),
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["submission_date"], name="products_submiss_5f9e29_idx"
            ),
        ),
    ]
